#!/usr/bin/env tclsh8.6
set haystacks {
	two1nine
	eightwothree
	abcone2threexyz
	xtwone3four
	4nineeightseven2
	zoneight234
	7pqrstsixteen
}

set needles {
	one	1
	two	2
	three	3
	four	4
	five	5
	six	6
	seven	7
	eight	8
	nine	9
	1	1
	2	2
	3	3
	4	4
	5	6
	6	6
	7	7
	8	8	
	9 	9
}

# Note, the haystacks would be a line, we we'll return the results after 
#       each one.
foreach haystack $haystacks {
    array set results_array {}
    foreach {needle value} $needles {
        set start 0

        while { [set start [string first $needle $haystack $start]] >= 0 } {

           # if we get here, we found the needle.
           # puts "# line: $haystack $needle: pos: $start value: $value"
   	   
           # We have our data, let's put in in the results array, but first
           # make sure array key does not exists. If it does, something is 
           # wrong.
           if {[info exists results_array($start)]} { 
               puts stderr "Results at position: $start already defined"
               parray results_array
               exit 1
           }
           set results_array($start) $value
           
           # increment start by one
           incr start
       }
    }
    # Sort the results and put into a list of list.
    # Get the list of array keys (pos) and sort by integer.
    # using the sorted list, append the [pos value] list to 
    # the results list.
    set results {}
    foreach idx [lsort -integer [array names results_array]] {
        lappend results [list $idx $results_array($idx)]
    }
    # parray results_array
    puts "$results"
    array unset results_array
}
